generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String            @id @default(uuid())
  name         String
  email        String            @unique
  password     String
  role         String            @default("customer")
  contactNo    String
  verified     Boolean           @default(false)
  otp          String
  image        String
  dateOfBirth  DateTime?
  gender       String?
  about        String?
  profession   String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  reviews      ReviewAndRating[]
  user_address Address[]
  booking      Booking[]

  @@map("user")
}

model Address {
  id          String   @id @default(uuid())
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  contactNo   String
  description String
  type        String   @default("primary")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@map("address")
}

model Category {
  id              String            @id @default(uuid())
  name            String
  image           String
  details         String
  faq             Json
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  services        Service[]
  reviewAndRating ReviewAndRating[]

  @@map("category")
}

model Service {
  id          String            @id @default(uuid())
  name        String
  price       String
  features    String[]
  duration    Int
  description String
  categoryId  String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  reviews     ReviewAndRating[]

  category     Category   @relation(fields: [categoryId], references: [id])
  availability TimeSlot[]
  booking      Booking[]

  @@map("service")
}

model ReviewAndRating {
  id         String @id @default(uuid())
  review     String
  rating     Int
  userId     String
  serviceId  String
  categoryId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
  service  Service  @relation(fields: [serviceId], references: [id])

  @@map("reviewAndRating")
}

model TimeSlot {
  id        String   @id @default(uuid())
  service   Service  @relation(fields: [serviceId], references: [id])
  serviceId String
  date      DateTime
  startTime DateTime
  endTime   DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Booking   Booking[]

  @@map("timeSlot")
}

model Booking {
  id         String   @id @default(uuid())
  userId     String
  serviceId  String
  timeSlotId String
  startTime  DateTime
  endTime    DateTime
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  service  Service  @relation(fields: [serviceId], references: [id])
  timeSlot TimeSlot @relation(fields: [timeSlotId], references: [id])

  @@map("booking")
}

model Faq {
  id        String   @id @default(uuid())
  question  String
  answare   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faq")
}

model Blog {
  id          String   @id @default(uuid())
  title       String
  description String
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("blog")
}
